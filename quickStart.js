require('dotenv').config();
const { Sender } = require('./helper/Sender');
const {TransactionTracker} = require('@haechi-labs/henesis-sdk-js');

const {CLIENT_ID, PRIVATE_KEY, NODE_ENDPOINT, PLATFORM, NETWORK} = process.env;
const TIMEOUT = 30*1000;
const CONFIRMATION = 6;
const GAS_PRICE = 1000000000;

const tracker = new TransactionTracker(CLIENT_ID, {
  platform: PLATFORM,
  network: NETWORK
});

const sender = new Sender(PRIVATE_KEY, NODE_ENDPOINT);

async function generateTx() {
  const nonce = await sender.getNonce();
  const txHash = await sender.send(nonce, GAS_PRICE);
  console.log(`transaction generated. txHash:${txHash}`);

  // Start tracking transaction
  // txHash which is generated by web3 or could be copied by etherscan
  await tracker.trackTransaction(txHash, {
    timeout: TIMEOUT,
    confirmation: CONFIRMATION
  });
}

async function trackTx () {
  const subscription = await tracker.subscribe(
    'transaction',
    {
      subscriptionId: 'your-subscription-id',
      ackTimeout: 30 * 1000 // default is 10 * 1000 (ms)
    }
  );

  subscription.on('message', async (message) => {
    console.log(`now transaction status is: ${message.data.type}`);
    switch(message.data.type) {
      case 'pending' :
        // When a transaction is not mined within 'timeout', after the 'trackTransaction' function is called.
        console.log('message.data.result',message.data.result);
        break;
      case 'receipt' :
        // When a transaction is mined.
        console.log('message.data.result',message.data.result);
        break;
      case 'confirmation' :
        // When the number of 'confirmation` blocks created, after the transaction is mined.
        console.log('message.data.result',message.data.result);
        break;
    }
    message.ack();
  });

  subscription.on('error', async (error) => {
    console.log('err',error)
  });
}

async function main () {
  await trackTx();
  await generateTx();
}

main();
